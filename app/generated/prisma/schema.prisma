// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ProfileAnalytics {
  id                      String          @id @default(cuid())
  universalProfileAddress String          @unique
  createdAt               DateTime        @default(now())
  isActive                Boolean         @default(true)
  visitorRecords          VisitorRecord[]
}

model VisitorRecord {
  id                             String           @id @default(cuid())
  profileAnalyticsAddress        String
  visitorUniversalProfileAddress String
  profileAnalyticsId             String
  geoLocation_country            String?
  geoLocation_city               String?
  geoLocation_region             String?
  geoLocation_latitude           Float?
  geoLocation_longitude          Float?
  deviceInfo_deviceType          String?
  deviceInfo_operatingSystem     String?
  deviceInfo_browser             String?
  deviceInfo_screenResolution    String?
  visitTimestamp                 DateTime
  profileAnalytics               ProfileAnalytics @relation(fields: [profileAnalyticsAddress], references: [universalProfileAddress])
}
